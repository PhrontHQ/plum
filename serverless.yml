frameworkVersion: '3'
# Removes serveless enterprise plugin injection
# See https://www.serverless.com/blog/framework-release-v138-websockets
# org: benoitmarchant
service: oh-my-plum-appointment-guru
variablesResolutionMode: 20210326

# Load environment variables from .env files (default: false)
# See https://www.serverless.com/framework/docs/environment-variables
useDotenv: true

package:
    individually: false

    excludeDevDependencies: false
    patterns:
      - '!~/**'
      - '!tools/**'
      - '!test/**'
      - '!builds/**'
      - '!dev/**'
      - '!.vscode/**'
      - '!node_modules/mod/demo/**'
      - '!node_modules/mod/.git/**'
      - '!node_modules/mod/ui/**'
      - '!node_modules/mod/test/**'
      - '!node_modules/mod/testing/**'
      - '!node_modules/mod/tools/**'
      - '!node_modules/mod/node_modules/**'
      - '!node_modules/mod/.vscode/**'
      - '!node_modules/business-data.mod/dev/**'
      - '!node_modules/business-data.mod/test/**'
      - '!node_modules/business-data.mod/sandbox/**'
      - '!node_modules/business-data.mod/node_modules/**'
      - '!node_modules/business-data.mod/.git/**'
      - '!node_modules/business-data.mod/.vscode/**'
      - '!node_modules/mod-geo/ui/**'
      - '!node_modules/mod-geo/test/**'
      - '!node_modules/mod-geo/.git/**'
      - '!node_modules/local-websocket-server/**'
      - '!node_modules/serverless/**'
      - '!node_modules/serverless-offline/**'
      - '!node_modules/serverless-plugin-common-excludes/**'
      - '!node_modules/serverless-plugin-include-dependencies/**'
      - '!node-build*'
      - '!node_modules/@aws-sdk/**/dist-es/**'
      - '!node_modules/@aws-sdk/**/dist-types/**'
      - 'node_modules/uuid/**'


    include:
      - node_modules/uuid/**
      - "!dev/**"

    exclude:
      - ~/**
      # - node_modules/**/**.ts
      - builds/**
      # - dev/**
      - node-build*/**
      - test/**
      - tools/**
      - tmp/**
      - .vscode/**
      # Manual dev dependencies
      # - node_modules/http-server/**
      # - node_modules/webpack/**
      # - node_modules/local-websocket-server/**
      # - node_modules/serverless/**
      # - node_modules/serverless-apigw-binary/**
      # - node_modules/serverless-dotenv-plugin/**
      # - node_modules/serverless-offline/**
      # - node_modules/serverless-plugin-common-excludes/**
      # - node_modules/serverless-plugin-include-dependencies/**
      # - node_modules/serverless-plugin-package-size/**
      # - node_modules/serverless-webpack/**

      # - node_modules/@aws-sdk/**/dist-es/**
      # - node_modules/@aws-sdk/**/dist-types/**
      - node_modules/mod/.git/**
      - node_modules/mod/.vscode/**
      - node_modules/mod/demo/**
      - node_modules/mod/ui/**
      - node_modules/mod/test/**
      - node_modules/mod/testing/**
      - node_modules/mod/tools/**
      # - node_modules/mod/window-loader/**
      - node_modules/mod-geo/.git/**
      - node_modules/mod-geo/test/**
      - node_modules/mod-geo/ui/**
      - node_modules/business-data.mod/.git/**
      - node_modules/business-data.mod/.vscode/**
      - node_modules/business-data.mod/dev/**
      - node_modules/business-data.mod/sandbox/**
      - node_modules/business-data.mod/test/**
      - node_modules/business-data.mod/ui/**
      - node_modules/local-websocket-server/**
      - node_modules/serverless/**
      - node_modules/serverless-offline/**
      - node_modules/serverless-plugin-include-dependencies/**
      - vscode-profile-**
      - ./**.cpuprofile
  
#setup for environements and accounts to use so we cand do
# $ serverless deploy --stage mod
# $ serverless deploy --stage test
# $ serverless deploy --stage prod
# more at https://serverless-stack.com/chapters/configure-multiple-aws-profiles.html
custom:
  myCategory: dental
  myOrganization: cogent-design
  myDomain: oh.my-plum-appointment.guru
  myStage: ${opt:stage, self:provider.stage}
  myRegion: ${opt:region, self:provider.region}
  myPhrontDeskDomainName: ${self:service}.${self:custom.myOrganization}.${self:custom.myCategory}.app.phrontier.live
  myMainWorkerWebsocketDomainName: connect.${self:service}.${self:custom.myOrganization}.${self:custom.myCategory}.app.phrontier.live
  myMainWorkerHttpDomainName: send.${self:service}.${self:custom.myOrganization}.${self:custom.myCategory}.phrontier.live
  
  myStagePhrontDeskDomainName:
    mod: ${self:custom.myStage}.${self:custom.myPhrontDeskDomainName}
    test: ${self:custom.myStage}.${self:custom.myPhrontDeskDomainName}
    live: ${self:custom.myPhrontDeskDomainName}

  myStageMainWorkerWebsocketDomainName:
    mod: ${self:custom.myStage}.${self:custom.myMainWorkerWebsocketDomainName}
    test: ${self:custom.myStage}.${self:custom.myMainWorkerWebsocketDomainName}
    live: ${self:custom.myMainWorkerWebsocketDomainName}

  myStageMainWorkerHttpDomainName:
    mod: ${self:custom.myStage}.${self:custom.myMainWorkerHttpDomainName}
    test: ${self:custom.myStage}.${self:custom.myMainWorkerHttpDomainName}
    live: ${self:custom.myMainWorkerHttpDomainName}

  myProfile:
    mod: cogent-mod
    test: cogent-test
    live: cogent-live
  myAccount:
    mod: 006408448862
    test: 545740467277
    live: 540973189736
  myRole:
    mod: arn:aws:iam::006408448862:role/lambda-runner
    test: arn:aws:iam::545740467277:role/lambda-runner
    live: arn:aws:iam::540973189736:role/lambda-runner
  myCfnRole:
    mod: arn:aws:iam::006408448862:role/cloudformation-manager
    test: arn:aws:iam::545740467277:role/cloudformation-manager
    live: arn:aws:iam::540973189736:role/cloudformation-manager
  serverless-offline:
    httpPort: 4000
    websocketPort: 3001
    lambdaPort: 4002

  distill:
    include:
      - 'node_modules/mod/core/date/time-zone-data'

    minifyPatterns:
      - 'node_modules/**'
      - '!node_modules/mod/**'
      - '!node_modules/mod-geo/**'
      - '!node_modules/business-data.mod/**'
      # - '!*/**'

  s3Sync:
    # A simple configuration for copying static assets
    - bucketName: ${self.custom.myPhrontDeskDomainName} # required
      #bucketPrefix: assets/ # optional
      localDir: builds/plum-appointments # required
      # localDir: / # required
      deleteRemoved: false # optional, indicates whether sync deletes files no longer present in localDir. Defaults to 'true'
      #acl: public-read # optional
      followSymlinks: true # optional
      #defaultContentType: text/html # optional
      params: # optional
        - index.html:
            CacheControl: 'public, must-revalidate, proxy-revalidate, max-age=0'
        - "*.js":
            CacheControl: 'public, max-age=31536000'
      #bucketTags: # optional, these are appended to existing S3 bucket tags (overwriting tags with the same key)
      #  tagKey1: tagValue1
      #  tagKey2: tagValue2

  customDomains:
    - websocket:
        domainName: ${self:custom.myStageMainWorkerWebsocketDomainName.${self:custom.myStage}}
        stage: ${self:custom.myStage}
        basePath: ''
        certificateName: '*.phrontier.live'
        createRoute53Record: true
        createRoute53IPv6Record: true
        endpointType: 'regional'
        securityPolicy: tls_1_2
    - http:
        domainName: ${self:custom.myStageMainWorkerHttpDomainName.${self:custom.myStage}}
        stage: ${self:custom.myStage}
        basePath: ''
        certificateName: '*.phrontier.live'
        createRoute53Record: true
        createRoute53IPv6Record: true
        endpointType: 'regional'
        securityPolicy: tls_1_2

  prune:
    automatic: true
    includeLayers: true
    number: 3

    
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: mod
  profile: ${self:custom.myProfile.${self:custom.myStage}}
  role: ${self:custom.myRole.${self:custom.myStage}} 
  cfnRole: ${self:custom.myCfnRole.${self:custom.myStage}}  # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials
  region: us-west-2 # Overwrite the default region used. Default is us-east-1
  websocketsApiName: connect.${self:service}
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          # - Ref: AWS::Region
          - ${self:custom.myRegion}
          - .amazonaws.com/
          - ${self:custom.myStage}
  httpApi:
    name: send.${self:service}
    # Disable the default 'execute-api' HTTP endpoint (default: false)
    # Useful when using a custom domain.
    disableDefaultEndpoint: true
    # Enable CORS HTTP headers with default settings (allow all)
    # Can be fine-tuned with specific options
    cors: true
    authorizers:
      authorizeSend:
        type: request
        functionName: authorizeSend
        identitySource:
          - $request.querystring.session




functions:
  connect:
    handler: main.connect
    events:
      - websocket:
          route: $connect # authorizers are only for connect routes
          authorizer: # references the auth function below
            name: authorize
            # resultTtlInSeconds: 3600
            identitySource:
              - 'route.request.querystring.session'

  authorize:
    handler: main.authorize

  default:
    handler: main.default
    events:
      - websocket:
          route: $default

  authorizeSend:
    handler: main.authorizeSend

  send:
    handler: main.send
    events:
      - httpApi:
          path: /
          method: POST
          authorizer:
            name: authorizeSend
            # type: request
            # identitySource:
            #   - 'method.request.querystring.session'

  disconnect:
    handler: main.disconnect
    events:
      - websocket:
          route: $disconnect
            # auth:
  #   handler: handler.auth

  authenticate:
    handler: main.authenticate
    events:
      - httpApi:
          path: /authenticate
          method: POST


plugins:
  - serverless-plugin-common-excludes
  - distill
  - serverless-domain-manager
  - serverless-offline
  - serverless-s3-sync
